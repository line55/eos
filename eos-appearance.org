#+TITLE: EOS: Emacs Appearance
#+AUTHOR: Lee Hinman
#+EMAIL: lee@writequit.org
#+SETUPFILE: ~/eos/setupfiles/eos.setup

#+BEGIN_SRC emacs-lisp
(provide 'eos-appearance)
#+END_SRC

* Determining whether this will be a "light" or "dark" session
:PROPERTIES:
:VISIBILITY: all
:CUSTOM_ID: light-or-dark
:END:
First, let's determine whether I'm going to be using a dark background, or a
light background. I set a var to either '=light= or '=dark= depending on
whatever I'm in the mood for. This is used later on for the modeline theme, as
well as the general theme for look-and-feel things.

#+BEGIN_SRC emacs-lisp
(defvar eos/background 'light)
;;(defvar eos/background 'dark)
#+END_SRC

* Emacs Appearance
:PROPERTIES:
:CUSTOM_ID: appearance
:END:

Beacon flashes the cursor whenever you adjust position, really helpful when
jumping between a billion windows and having no idea where the cursor actually
is. It's currently disabled because it causes a bit of CPU churn that I don't
really need.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :disabled t
  :diminish beacon-mode
  :init (beacon-mode 1)
  :config
  (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode))
#+END_SRC

Paren-face adds a face for parentheses, which is used by themes to darken the
parens.

#+BEGIN_SRC emacs-lisp
(use-package paren-face
  :ensure t
  :init (global-paren-face-mode))
#+END_SRC

Don't use dialog boxes, just ask inside Emacs

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

* Color Theme
:PROPERTIES:
:CUSTOM_ID: color-theme
:END:
If using OSX, the colors and fonts look a bit wonky, so let's fix that

#+BEGIN_SRC emacs-lisp
(setq ns-use-srgb-colorspace t)
;; Anti-aliasing
(setq mac-allow-anti-aliasing t)
#+END_SRC

For light-colored backgrounds, I used [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]]. For dark-colored backgrounds
(most of the time), I use the tomorrow-night theme, which I find to be a good
balanced of color and pleasing to my eyes.

#+BEGIN_SRC emacs-lisp
(if (eq eos/background 'dark)
    (progn
      (use-package doom-themes
        :ensure t
        :disabled t
        :init
        (load-theme 'doom-one t))
      (use-package color-theme-sanityinc-tomorrow
        :ensure t
        :disabled t
        :init
        (load-theme 'sanityinc-tomorrow-night t)
        ;; Just ever so slightly more bright foreground text, default is
        ;; "#c5c8c6". Makes it easier to see on a sunny day
        (set-face-foreground 'default "#ffffff"))
      (use-package tao-theme
        :ensure t
        :init
        (load-theme 'tao-yin t)
        (require 'git-gutter)
        (require 'git-gutter-fringe)
        (set-face-attribute 'git-gutter:added nil :foreground "green")
        (set-face-attribute 'git-gutter-fr:added nil :foreground "green")
        (set-face-attribute 'git-gutter:deleted nil :foreground "red")
        (set-face-attribute 'git-gutter-fr:deleted nil :foreground "red")
        (set-face-attribute 'git-gutter:modified nil :foreground "light blue")
        (set-face-attribute 'git-gutter-fr:modified nil :foreground "light blue")))
  (use-package leuven-theme
    :ensure t
    :disabled t
    :init
    (load-theme 'leuven t)
    (set-face-background 'default "#F7F7F7")
    (set-face-attribute 'eyebrowse-mode-line-active nil
                        :foreground "#000000"
                        :underline t)
    (set-face-attribute 'eyebrowse-mode-line-inactive nil
                        :foreground "#888888"))
  (use-package github-theme
    :ensure t
    :init
    (load-theme 'github t)))
#+END_SRC

* Fonts
:PROPERTIES:
:CUSTOM_ID: fonts
:END:
I've been using [[http://sourcefoundry.org/hack/][Hack]] or DejaVu Sans almost exclusively lately, it looks pretty
nice to me on both Linux and any other computer. Even though it's called
"Bitstream Vera Sans Mono" on OSX, it's really the same.

** Config for Linux/X11 systems:
:PROPERTIES:
:CUSTOM_ID: linux
:END:

#+BEGIN_SRC emacs-lisp
;; The original font height (so it can be restored too at a later time)
(setq eos/original-height 105)

(defun eos/setup-x11-fonts ()
  (when (eq window-system 'x)
    ;; default font and variable-pitch fonts
    (set-face-attribute 'default nil :family "Hack" :height eos/original-height)
    (set-face-attribute 'variable-pitch nil
                        :family "DejaVu Sans" :height eos/original-height)
    ;; font for all unicode characters
    (set-fontset-font t 'unicode "DejaVu Sans Mono" nil 'prepend)))

(when (eq window-system 'x)
  (add-hook 'after-init-hook #'eos/setup-x11-fonts))
#+END_SRC

** Config for OSX:
:PROPERTIES:
:CUSTOM_ID: osx
:END:

#+BEGIN_SRC emacs-lisp
(defun eos/setup-osx-fonts ()
  (when (eq system-type 'darwin)
    (set-default-font "Bitstream Vera Sans Mono")
    (set-face-attribute 'default nil :height 120)
    (set-face-attribute 'fixed-pitch nil :height 120)))

(when (eq system-type 'darwin)
  ;; The original font height (so it can be restored too at a later time)
  (setq eos/original-height 120)
  (add-hook 'after-init-hook #'eos/setup-osx-fonts))
#+END_SRC

** Configuration for monitor switching

Sometimes I want to plug my laptop into a larger monitor, so I'd like to have a
single function I can call to adjust any sizes that are necessary.

#+BEGIN_SRC emacs-lisp
(defvar eos/height-increase 20
  "Default value to increment the size by when jacking into a monitor.")

(defun eos/monitor-jack-in ()
  "Increase the font size by `eos/height-increase' amount, for
when you jack into an external monitor."
  (interactive)
  (set-face-attribute 'default nil :height (+ (face-attribute 'default :height)
                                              eos/height-increase))
  (set-face-attribute 'variable-pitch
                      nil
                      :height (+ (face-attribute 'variable-pitch :height)
                                 eos/height-increase)))

(defun eos/monitor-jack-out ()
  "Go back to the default font size and `line-spacing'"
  (interactive)
  (set-face-attribute 'default nil :height eos/original-height)
  (set-face-attribute 'variable-pitch nil :height eos/original-height)
  (text-scale-adjust 0)
  (when (fboundp 'minimap-mode)
    (minimap-mode 0))
  (setq line-spacing 0))

(defun eos/code-reading-mode ()
  "Do a bunch of fancy stuff to make reading/browsing code
easier. When you're done, `eos/monitor-jack-out' is a great way
to go back to a normal setup."
  (interactive)
  (delete-other-windows)
  (text-scale-increase 1)
  (setq line-spacing 5)
  (use-package minimap :ensure t)
  (when (not minimap-mode)
    (minimap-mode 1)))
#+END_SRC

* Emacs' Mode-line
:PROPERTIES:
:CUSTOM_ID: modeline
:END:

Hmm... there are two real "useful" additions here, either smart mode line, or
spaceline

Display the time and load on the modeline

#+BEGIN_SRC emacs-lisp
(setq
 ;; don't display info about mail
 display-time-mail-function (lambda () nil)
 ;; update every 15 seconds instead of 60 seconds
 display-time-interval 15)
(display-time-mode 1)
#+END_SRC

Buuuutttt... I don't really care about the time, so ignore it

#+BEGIN_SRC emacs-lisp
(setq display-time-format "")
#+END_SRC

Let's also display the battery status in the mode-line

#+BEGIN_SRC emacs-lisp
;;(display-battery-mode 1)
#+END_SRC

** smart-mode-line
:PROPERTIES:
:CUSTOM_ID: h:ea243083-222e-4bd5-9f07-e477ae1f7233
:END:

sml is great, but I did some profiling and it was eating a lot of
responsiveness, so I go back and forth with it.

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (if (eq eos/background 'dark)
      (setq sml/theme eos/background)
    (setq sml/theme 'light))
  (sml/setup)
  :config
  (setq sml/shorten-directory t
        sml/shorten-modes t)
  (add-to-list 'sml/replacer-regexp-list '("^~/Sync/org/" ":org:"))
  (add-to-list 'sml/replacer-regexp-list '("^~/es/elasticsearch-extra/x-pack/" ":X-PACK:"))
  (add-to-list 'sml/replacer-regexp-list '("^~/es/elasticsearch/" ":ES:") t))
#+END_SRC

** spaceline
:PROPERTIES:
:CUSTOM_ID: h:ce37df26-84aa-4dd4-8c1e-c380a05f89c2
:END:

This is the modeline built into spacemacs, but a separate package. Worth a try, anyway...

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :disabled t
  :init
  (setq powerline-default-separator 'zigzag
        spaceline-minor-modes-separator " ")
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode)
  (use-package info+
    :ensure t
    :init
    (spaceline-info-mode))
  (use-package fancy-battery
    :ensure t
    :init
    (add-hook 'after-init-hook #'fancy-battery-mode)
    (display-battery-mode -1)))
#+END_SRC

* Scrolling

Smooth scrolling means when you hit =C-n= to go to the next line at the bottom
of the page, instead of doing a page-down, it shifts down by a single line. The
margin means that much space is kept between the cursor and the bottom of the
buffer.

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 3
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      scroll-preserve-screen-position t
      auto-window-vscroll nil
      hscroll-margin 5
      hscroll-step 5)
#+END_SRC

* Highlighting the current line with hl-line-mode
:PROPERTIES:
:CUSTOM_ID: h:effd858a-d5e9-4afc-9e36-3488f7c75189
:END:

I turn this on and off all over the place, so it's nice to have a global place
where I can have it defined/handled.

First, a flag for whether it's enabled, if set to =nil=, then even if
hl-line-mode is "turned on" it won't be turned on. This allows me to manage
enabling it in a single place.

#+BEGIN_SRC emacs-lisp
(setq eos/hl-line-enabled t)
#+END_SRC

Then two functions to do the turning on/off

#+BEGIN_SRC emacs-lisp
(defun eos/turn-on-hl-line ()
  (interactive)
  (when eos/hl-line-enabled
    (hl-line-mode 1)))

(defun eos/turn-off-hl-line ()
  (interactive)
  (hl-line-mode -1))
#+END_SRC

Turn it on by default (if enabled!) in prog-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'eos/turn-on-hl-line)
(add-hook 'mu4e-view-mode-hook #'eos/turn-on-hl-line)
(add-hook 'erc-mode-hook #'eos/turn-on-hl-line)
#+END_SRC

* The Editor Fringe
:PROPERTIES:
:CUSTOM_ID: fringe
:END:

So, fringe is nice actually, I set it to the same color as the background so it
blends into the foreground

#+BEGIN_SRC emacs-lisp
(defun eos/set-fringe-background ()
  "Set the fringe background to the same color as the regular background."
  (setq eos/fringe-background-color
        (face-background 'default))
  (custom-set-faces
   `(fringe ((t (:background ,eos/fringe-background-color))))))

(add-hook 'after-init-hook #'eos/set-fringe-background)
#+END_SRC

Show where the buffer ends on the right-hand fringe

#+BEGIN_SRC emacs-lisp
(setq-default indicate-buffer-boundaries nil ;; 'right
              fringe-indicator-alist
              (delq (assq 'continuation fringe-indicator-alist)
                    fringe-indicator-alist)
              fringes-outside-margins t
              ;; Keep cursors and highlights in current window only
              cursor-in-non-selected-windows nil)

(fringe-mode 8)
#+END_SRC

* Shift the color of text with Redshift
:PROPERTIES:
:CUSTOM_ID: redshift
:END:

Redshift is like Flux, but nicer. It changes the color balance of the screen as
the sun sets to make it a bit easier on your eyes. I manually change the max so
it's not insane, otherwise it ends up so red you can't see anything.

#+BEGIN_SRC conf :tangle out/redshift.service
[Unit]
Description=Redshift

[Service]
Type=simple
ExecStart=/usr/bin/redshift -l geoclue2 -t 6500:3700
ExecStop=/usr/bin/pkill redshift
Environment=DISPLAY=:0
Restart=always

[Install]
WantedBy=default.target
#+END_SRC

#+BEGIN_SRC sh :tangle sh/install-redshift.sh
deb-install redshift
rpm-install redshift
cp -fv $PWD/out/redshift.service ~/.config/systemd/user/redshift.service
systemctl --user daemon-reload
systemctl --user enable redshift
systemctl --user start redshift
#+END_SRC

* Variable width font hacks
:PROPERTIES:
:CUSTOM_ID: variable-width-fonts
:END:

So, variable font width is really nice in GUI emacs, with org-mode however,
almost all of my source blocks don't look that great without a fixed-width font
(as well as tables, verbatim, etc).

So, there is a way to hack around thing. This relies on a custom patch to
org-mode that looks like:

#+BEGIN_SRC diff :tangle no
diff --git a/lisp/org-faces.el b/lisp/org-faces.el
index 941a604..abc646c 100644
--- a/lisp/org-faces.el
+++ b/lisp/org-faces.el
@@ -537,6 +537,9 @@ follows a #+DATE:, #+AUTHOR: or #+EMAIL: keyword."
   "Face used for the line delimiting the end of source blocks."
   :group 'org-faces)

+(defface org-block-background '((t ()))
+  "Face used for the source block background.")
+
 (defface org-verbatim
   (org-compatible-face 'shadow
     '((((class color grayscale) (min-colors 88) (background light))
diff --git a/lisp/org.el b/lisp/org.el
index af68539..b2c8309 100644
--- a/lisp/org.el
+++ b/lisp/org.el
@@ -5932,6 +5932,15 @@ by a #."
              (cond
               ((and lang (not (string= lang "")) org-src-fontify-natively)
                (org-src-font-lock-fontify-block lang block-start block-end)
+               ;; remove old background overlays
+               (mapc (lambda (ov)
+                       (if (eq (overlay-get ov 'face) 'org-block-background)
+                           (delete-overlay ov)))
+                     (overlays-at (/ (+ beg1 block-end) 2)))
+               ;; add a background overlay
+               (setq ovl (make-overlay beg1 block-end))
+                (overlay-put ovl 'face 'org-block-background)
+                (overlay-put ovl 'evaporate t) ; make it go away when empty
                (add-text-properties beg1 block-end '(src-block t)))
               (quoting
                (add-text-properties beg1 (min (point-max) (1+ end1))

#+END_SRC

To re-add support for the =org-block-background= face that was removed in 8.3+.

Then, you can do something like this:

#+BEGIN_SRC emacs-lisp
(when (and window-system
           ;; Only if I have a custom patched org-mode
           (file-exists-p "~/src/elisp/org-mode"))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'markdown-mode-hook 'variable-pitch-mode)

  (defun eos/adjoin-to-list-or-symbol (element list-or-symbol)
    (let ((list (if (not (listp list-or-symbol))
                    (list list-or-symbol)
                  list-or-symbol)))
      (require 'cl-lib)
      (cl-adjoin element list)))

  ;; Fontify certain org things with fixed-width
  (eval-after-load "org"
    '(mapc
      (lambda (face)
        (set-face-attribute
         face nil
         :inherit
         (eos/adjoin-to-list-or-symbol
          'fixed-pitch
          (face-attribute face :inherit))))
      (list 'org-code 'org-block 'org-table 'org-block-background
            'org-verbatim 'org-formula 'org-macro)))

  ;; Fontify certain markdown things with fixed-width
  (eval-after-load "markdown-mode"
    '(mapc
      (lambda (face)
        (set-face-attribute
         face nil
         :inherit
         (eos/adjoin-to-list-or-symbol
          'fixed-pitch
          (face-attribute face :inherit))))
      (list 'markdown-pre-face 'markdown-inline-code-face))))
#+END_SRC

Great credit for this goes to [[https://yoo2080.wordpress.com/2013/05/30/monospace-font-in-tables-and-source-code-blocks-in-org-mode-proportional-font-in-other-parts/][this blog post.]]

* Rainbow delimiters (but not the way you think)
:PROPERTIES:
:CUSTOM_ID: h:30cd960c-61cd-4851-8484-355f813bcc01
:END:
This is instead used to highlight unmatching parens and the like, lovingly taken
from
http://timothypratley.blogspot.ru/2015/07/seven-specialty-emacs-settings-with-big.html

This is currently disabled because rainbow-delimiters is too much fruit salad
with the tomorrow-night theme.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :disabled t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error))
#+END_SRC

* Custom colors in buffer-local faces
:PROPERTIES:
:CUSTOM_ID: h:54fba870-b04f-4870-94f3-458de748e67f
:END:

So, I really like using a theme that uses something like [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers-mode]],
but it's just too many colors when using a regular theme (which is why I was
originally using tao-theme for it since it's monochromatic).

The thing is, I'd like to have things monochrome where color-identifiers works
and have regular highlighting on modes where it doesn't. This unfortunately
requires that the face be buffer-local, so I need a tool to do that.

#+BEGIN_SRC emacs-lisp
(defun eos/make-local-face (face-name &rest args)
  "Make a buffer face local"
  (interactive)
  (let ((local-face (intern (concat (symbol-name face-name) "-local"))))
    ;; First create new face which is a copy of the old face
    (copy-face face-name local-face)
    (apply 'set-face-attribute local-face nil args)
    (set (make-local-variable face-name) local-face)))
#+END_SRC

Now, we can use that setting to modify a bunch of things before
color-identifiers-mode is activated. In this case, however, only before
java-mode applies the color-identifiers configuration.

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :ensure t
  :diminish color-identifiers-mode
  :init
  (defun eos/turn-on-color-identifiers ()
    (interactive)
    (let ((faces '(;; font-lock-comment-face
                   ;; font-lock-comment-delimiter-face
                   font-lock-constant-face
                   font-lock-type-face
                   font-lock-function-name-face
                   font-lock-variable-name-face
                   ;; font-lock-keyword-face
                   ;; font-lock-string-face
                   ;; font-lock-builtin-face
                   font-lock-preprocessor-face
                   font-lock-warning-face
                   font-lock-doc-face)))
      (dolist (face faces)
        (eos/make-local-face face :foreground nil))
      (eos/make-local-face 'font-lock-keyword-face :foreground nil :weight 'bold)
      (eos/make-local-face 'font-lock-builtin-face :foreground nil :weight 'bold)
      (color-identifiers-mode 1)))
  (add-hook 'java-mode-hook #'color-identifiers-mode)
  (add-hook 'emacs-lisp-mode-hook #'color-identifiers-mode)
  (global-color-identifiers-mode 1))
#+END_SRC

* Visible marks in buffers

I'm starting to turn off transient-mark mode[fn:33:
http://www.gnu.org/software/emacs/manual/html_node/emacs/Disabled-Transient-Mark.html#index-transient_002dmark_002dmode]
and move towards a model of actually treating the Mark as more than just a
selection tool, and towards treating it as a navigation tool. In light of that,
I'm going to start disabling =transient-mark-mode= and only relying on
=visible-mark-mode= for showing the mark, which alleviates most of the issues
you see with disabling =transient-mark-mode=

#+begin_src emacs-lisp :tangle yes
(use-package visible-mark
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'visible-mark-mode)
  :config
  (setq visible-mark-max 1)
  (setq visible-mark-faces '(visible-mark-active))

  (if (eq eos/background 'dark)
      (set-face-attribute 'visible-mark-active nil :background "#444444")
    (set-face-attribute 'visible-mark-active nil :background "#DDDDDD"))
  (set-face-attribute 'visible-mark-active nil :foreground nil))
#+end_src
