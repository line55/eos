#+TITLE: EOS: Navigation
#+AUTHOR: Lee Hinman
#+EMAIL: lee@writequit.org
#+SETUPFILE: ~/eos/setupfiles/eos.setup

#+BEGIN_SRC emacs-lisp
(provide 'eos-navigation)
#+END_SRC

* General Emacs Navigation
:PROPERTIES:
:CUSTOM_ID: general-nav
:END:

These are miscellaneous bindings used all over the place that don't
really fit in anywhere else.

First, some window management and navigation helpers

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x +") 'balance-windows-area)

(global-set-key (kbd "C-c y") #'bury-buffer)
(global-set-key (kbd "C-c C-y") #'bury-buffer)
(global-set-key (kbd "C-c r") #'revert-buffer)

;; ==== Window switching ====
(defun eos/other-window-backwards ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "M-'") #'other-window)
(global-set-key (kbd "M-\"") #'eos/other-window-backwards)
(global-set-key (kbd "H-'") #'other-window)
(global-set-key (kbd "H-\"") #'eos/other-window-backwards)
(global-set-key (kbd "<C-tab>") #'other-window)
(global-set-key (kbd "C-x C-o") #'other-window)
#+END_SRC

If you split buffers and have A on the left and B on the right, this will put B
on the left and A on the right. I actually use this more than I thought I
would...

#+BEGIN_SRC emacs-lisp
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(global-set-key (kbd "C-x 4 t") 'transpose-buffers)
#+END_SRC

Next, some of the random bindings that I use that don't really fit elsewhere.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-l") 'toggle-truncate-lines)

;; join on killing lines
(defun kill-and-join-forward (&optional arg)
  "If at end of line, join with following; otherwise kill line.
Deletes whitespace at join."
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (kill-line arg)))

(global-set-key (kbd "C-k") 'kill-and-join-forward)

;; join line to next line
;; (global-set-key (kbd "M-j")
;;                 (lambda ()
;;                   (interactive)
;;                   (join-line -1)))

;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; Start or switch to eshell
(global-set-key (kbd "C-x C-m") 'eshell)

;; If you want to be able to M-x without meta (phones, etc)
(global-set-key (kbd "C-c C-x") 'execute-extended-command)
#+END_SRC

** Isearch bindings
:PROPERTIES:
:CUSTOM_ID: isearch
:END:

#+BEGIN_SRC emacs-lisp
;; Use regex searches by default.
;;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;; Case-fold regex by default
(setq search-default-mode 'character-fold-to-regexp)
;; Non regex search gets the meta also
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))

(defun eos/add-watchword (string)
  "Highlight whatever `string' is in the current buffer
permanently."
  (font-lock-add-keywords
   nil `((,(if isearch-regexp isearch-string (regexp-quote isearch-string))
          1 '((:background "yellow") (:weight bold)) t))))

(define-key isearch-mode-map (kbd "M-h")
  (lambda () (interactive)
    (eos/add-watchword
     (if isearch-regexp isearch-string (regexp-quote isearch-string)))))
#+END_SRC

* Mouse-based navigation
:PROPERTIES:
:CUSTOM_ID: mouse
:END:

Need to enable this to get trackpad scrolling to work on my Lenovo T450s

#+BEGIN_SRC emacs-lisp
;; mouse integration
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                           (interactive)
                           (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                           (interactive)
                           (scroll-up 1)))
(setq mouse-sel-mode t)
(defun track-mouse (e))
#+END_SRC

* Dumb-jump
:PROPERTIES:
:CUSTOM_ID: h:45e9b2dd-2e84-4acd-b27e-6e31e9ee628f
:END:

Jumping to things, in a dumb way, with ag. It's usually bound to =C-M-g= (for
"goto" I guess), =C-M-p= to jump back, and =C-M-q= to "show" things.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :init (dumb-jump-mode))
#+END_SRC

* Move-text

This is a nice package used to move text around

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :init (move-text-default-bindings))
#+END_SRC
